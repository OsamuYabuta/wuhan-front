{"version":3,"sources":["logo.svg","components/Topics.js","components/PickedUpUsers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Topics","props","langs","state","ja","ko","cn","en","self","this","forEach","lang","axios","get","then","res","setState","data","topics","console","log","Tabs","defaultActiveKey","id","Tab","eventKey","title","Card","Header","Body","Table","bordered","striped","hover","map","topic","key","score","React","Component","PickedUpUsers","pickedupusers","pickedupuser","herf","screen_name","App","Container","Row","Col","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e61d77f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  Tabs,\n  Tab,\n  Card,\n  Table\n} from 'react-bootstrap';\n\nimport axios from 'axios'\n\n\nexport default class Topics extends React.Component {\n\n    langs = [\"ja\",\"ko\",\"cn\" , \"en\"]\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            ja:[],\n            ko:[],\n            cn:[],\n            en:[]\n        };\n    }\n\n    componentDidMount() {\n        var self = this;\n        this.langs.forEach(lang => {\n            axios.get(\"http://localhost:8000/topic/\" + lang).then(function(res) {\n                 self.setState({\n                    [lang]:res.data.topics\n                })\n            }).then(function(res) {\n                console.log(self.state.ja)\n            })\n        });\n    }\n\n\n    render() {\n        const {\n            ja,\n            ko,\n            cn,\n            en \n        } = this.state;\n\n        return (\n            <Tabs defaultActiveKey=\"japanese\" id=\"topics\">\n            <Tab eventKey=\"japanese\" title=\"日本語\">\n              <Card>\n                  <Card.Header>日本語トピック</Card.Header>\n                  <Card.Body>\n                      <Table bordered striped hover>\n                          <thead>\n                              <tr>\n                                  <th>No</th>\n                                  <th>トピック</th>\n                                  <th>スコア</th>\n                              </tr>\n                          </thead>\n                          <tbody>\n                              {ja.map((topic) => {\n                                  return (\n                              <tr key={ topic.id }>\n                                  <td>{ topic.id }</td>\n                                  <td>{ topic.topic }</td>\n                                  <td>{ topic.score }</td>\n                              </tr>);\n                              })}\n                          </tbody>\n                      </Table>\n                  </Card.Body>\n              </Card>\n            </Tab>\n            <Tab eventKey=\"korean\" title=\"韓国語\">\n            <Card>\n                  <Card.Header>韓国語トピック</Card.Header>\n                  <Card.Body>\n                      <Table bordered striped hover>\n                          <thead>\n                              <tr>\n                                  <th>No</th>\n                                  <th>トピック</th>\n                                  <th>スコア</th>\n                              </tr>\n                          </thead>\n                          <tbody>\n                          {ko.map((topic) => {\n                                  return (\n                              <tr key={ topic.id }>\n                                  <td>{ topic.id }</td>\n                                  <td>{ topic.topic }</td>\n                                  <td>{ topic.score }</td>\n                              </tr>);\n                              })}\n                          </tbody>\n                      </Table>\n                  </Card.Body>\n              </Card>\n            </Tab>\n            <Tab eventKey=\"chinese\" title=\"中国語\">\n            <Card>\n                  <Card.Header>中国語トピック</Card.Header>\n                  <Card.Body>\n                      <Table bordered striped hover>\n                          <thead>\n                              <tr>\n                                  <th>No</th>\n                                  <th>トピック</th>\n                                  <th>スコア</th>\n                              </tr>\n                          </thead>\n                          <tbody>\n                          {cn.map((topic) => {\n                                  return (\n                              <tr key={ topic.id }>\n                                  <td>{ topic.id }</td>\n                                  <td>{ topic.topic }</td>\n                                  <td>{ topic.score }</td>\n                              </tr>);\n                              })}\n                          </tbody>\n                      </Table>\n                  </Card.Body>\n              </Card>\n            </Tab>\n            <Tab eventKey=\"english\" title=\"英語\">\n            <Card>\n                  <Card.Header>英語トピック</Card.Header>\n                  <Card.Body>\n                      <Table bordered striped hover>\n                          <thead>\n                              <tr>\n                                  <th>No</th>\n                                  <th>トピック</th>\n                                  <th>スコア</th>\n                              </tr>\n                          </thead>\n                          <tbody>\n                          {en.map((topic) => {\n                                  return (\n                              <tr key={ topic.id }>\n                                  <td>{ topic.id }</td>\n                                  <td>{ topic.topic }</td>\n                                  <td>{ topic.score }</td>\n                              </tr>);\n                              })}\n                          </tbody>\n                      </Table>\n                  </Card.Body>\n              </Card>\n            </Tab>\n          </Tabs>\n        );\n    }\n}","import React from 'react'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  Tabs,\n  Tab,\n  Card,\n  Table\n} from 'react-bootstrap';\n\nimport axios from 'axios'\n\nexport default class PickedUpUsers extends React.Component {\n    langs = [\"ja\",\"ko\",\"cn\" , \"en\"]\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            \"ja\":[],\n            \"ko\":[],\n            \"cn\":[],\n            \"en\":[]\n        }\n    }\n\n    componentDidMount() {\n        var self = this;\n        this.langs.forEach(lang => {\n            axios.get(\"http://localhost:8000/pickedupusers/\" + lang).then(function(res) {\n                 self.setState({\n                    [lang]:res.data.pickedupusers\n                })\n            }).then(function(res) {\n                console.log(self.state.ja)\n            })\n        });\n    }\n\n    render() {\n        const {\n            ja,\n            ko,\n            cn,\n            en \n        } = this.state;\n\n        return (\n            <Tabs defaultActiveKey=\"japanese\" id=\"topics\">\n            <Tab eventKey=\"japanese\" title=\"日本語\">\n              <Card>\n                  <Card.Header>日本語ユーザー</Card.Header>\n                  <Card.Body>\n                      <Table bordered striped hover>\n                          <thead>\n                              <tr>\n                                  <th>No</th>\n                                  <th>ユーザー</th>\n                                  <th>スコア</th>\n                              </tr>\n                          </thead>\n                          <tbody>\n                              {ja.map((pickedupuser) => {\n                                  return (\n                              <tr key={ pickedupuser.id }>\n                                  <td>{ pickedupuser.id }</td>\n                                  <td><a herf=\"https://twitter.com/{ pickedupuser.screen_name }\">{ pickedupuser.screen_name }</a></td>\n                                  <td>{ pickedupuser.score }</td>\n                              </tr>);\n                              })}\n                          </tbody>\n                      </Table>\n                  </Card.Body>\n              </Card>\n            </Tab>\n            <Tab eventKey=\"korean\" title=\"韓国語\">\n            <Card>\n                  <Card.Header>韓国語ユーザー</Card.Header>\n                  <Card.Body>\n                      <Table bordered striped hover>\n                          <thead>\n                              <tr>\n                                  <th>No</th>\n                                  <th>ユーザー</th>\n                                  <th>スコア</th>\n                              </tr>\n                          </thead>\n                          <tbody>\n                          {ko.map((pickedupuser) => {\n                                  return (\n                              <tr key={ pickedupuser.id }>\n                                  <td>{ pickedupuser.id }</td>\n                                  <td><a herf=\"https://twitter.com/{ pickedupuser.screen_name }\">{ pickedupuser.screen_name }</a></td>\n                                  <td>{ pickedupuser.score }</td>\n                              </tr>);\n                              })}\n                          </tbody>\n                      </Table>\n                  </Card.Body>\n              </Card>\n            </Tab>\n            <Tab eventKey=\"chinese\" title=\"中国語\">\n            <Card>\n                  <Card.Header>中国語ユーザー</Card.Header>\n                  <Card.Body>\n                      <Table bordered striped hover>\n                          <thead>\n                              <tr>\n                                  <th>No</th>\n                                  <th>ユーザー</th>\n                                  <th>スコア</th>\n                              </tr>\n                          </thead>\n                          <tbody>\n                          {cn.map((pickedupuser) => {\n                                  return (\n                              <tr key={ pickedupuser.id }>\n                                  <td>{ pickedupuser.id }</td>\n                                  <td><a herf=\"https://twitter.com/{ pickedupuser.screen_name }\">{ pickedupuser.screen_name }</a></td>\n                                  <td>{ pickedupuser.score }</td>\n                              </tr>);\n                              })}\n                          </tbody>\n                      </Table>\n                  </Card.Body>\n              </Card>\n            </Tab>\n            <Tab eventKey=\"english\" title=\"英語\">\n            <Card>\n                  <Card.Header>英語ユーザー</Card.Header>\n                  <Card.Body>\n                      <Table bordered striped hover>\n                          <thead>\n                              <tr>\n                                  <th>No</th>\n                                  <th>ユーザー</th>\n                                  <th>スコア</th>\n                              </tr>\n                          </thead>\n                          <tbody>\n                          {en.map((pickedupuser) => {\n                                  return (\n                              <tr key={ pickedupuser.id }>\n                                  <td>{ pickedupuser.id }</td>\n                                  <td><a herf=\"https://twitter.com/{ pickedupuser.screen_name }\">{ pickedupuser.screen_name }</a></td>\n                                  <td>{ pickedupuser.score }</td>\n                              </tr>);\n                              })}\n                          </tbody>\n                      </Table>\n                  </Card.Body>\n              </Card>\n            </Tab>\n          </Tabs>\n        );\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Topics from './components/Topics';\nimport PickedUpUsers from './components/PickedUpUsers';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  Container,\n  Row,\n  Col\n } from 'react-bootstrap';\n\n\nfunction App() {\n  return (\n    <Container>\n      <Row>\n        <Col><Topics/></Col>\n        <Col><PickedUpUsers /></Col>\n      </Row>  \n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}